テンプレート機能
================

概要
----

ttl2htmlにおけるテンプレート機能とは、静的サイトを生成する際に、出力の見た目や構造を決定するHTMLテンプレートをカスタマイズする機能です。
本ツールでは、HTMLの構造や見た目を決める基本テンプレートを同梱しており、基本的に、何もカスタマイズせずに、静的サイトを構築できます。
特に、デフォルトのHTML出力では、特定のリソースページにおける、当該リソースがもつトリプル情報を、プロパティの一覧として整理して表示しますが、カスタマイズ用のテンプレートを用意すれば、サイト独自の追加情報を埋め込んだり、デザイン変更して独自の見た目を加えたり、追加機能を加えたりできます。

.. どのようなカスタマイズが可能か

テンプレート機能を利用すると、カスタマイズ項目としては、すべてのページで共有している基本テンプレートそのものを置き換えたり、またはリソースページの一部にHTML片を埋め込んだり、JavaScriptやCSSを組み合わせて動的な機能を持つページを構成できます。
例えば、以下のようなカスタマイズが可能です。

* レイアウトの変更: HTMLの構造を自由に定義し、ページ全体の見た目も用途に適したデザインに調整できます。
* スタイルの適用: 独自のCSSを組み込んで、フォント、色、間隔などのデザインを調整できます。
* スクリプトの組み込み: JavaScriptを使用して、動的なインタラクションを追加できます（例: データの検索・フィルタリング機能など）。
* 外部データベースとの連携: データ中の識別子を利用して、外部のデータベースへのリンクを自動生成することも可能です。

このテンプレート機能を活用することで、単なるRDFデータの変換を超え、目的に応じた柔軟な情報提供が可能になります。

また、トップページやabout.htmlといった個別の機能を持つページにも独自の要素を足すことができます。

カスタマイズ方法は、基本テンプレートの一部を上書き変更する内容を加えたり、追加テンプレートを加えることにより、対応する生成ページの内容に変化を付けることができます。

テンプレートの基本構造
----------------------

.. 必要な要素（HTMLの基本構造）

ttl2htmlのテンプレートは、Turtle（TTL）形式のデータをHTMLとして出力する際に、レイアウトやデザインを自由にカスタマイズするための仕組みです。テンプレートには `ERB (Embedded Ruby)形式 <https://en.wikipedia.org/wiki/ERuby>`_ を使用しており、HTMLの中にRubyのコードを埋め込むことで、柔軟なデータ表示が可能になります。

HTML出力用テンプレートの基本構造を下図に示します。

.. figure:: template-structure.png

    テンプレートページを構成するファイル構造

ttl2htmlのテンプレートは、以下の3つのファイルで構成されます。

1. layout.html.erb （レイアウト全体）

  ``layout.html.erb`` は出力する全てのHTMLの基本構造を規定しており、``<head>`` 要素のメタ情報やCSS、JavaScriptの読み込みを設定します。``<body>`` の基本レイアウトを管理し、他の個別テンプレートを埋め込みます。

2. default.html.erb （ページごとのテンプレート）

  個別リソースページの内容は ``default.html.erb`` が描画し、RDFデータをどのように表示するかを定義します。

3. _default.html.erb （部分テンプレート; 追加要素が必要な場合）

  個別のページごとに追加的な要素を加える場合は、 ``_default.html.erb`` ファイル（先頭にアンダーバー (_) が付きます）を追加することでカスタマイズを加えることができます。

これら3つのうち、標準配布には ``layout.html.erb`` と ``default.html.erb`` が同梱されています。
カスタマイズが不要であれば、そのまま利用できます。
``_default.html.erb`` は同梱されていないため、ページ固有の差し込みが必要な場合はプロジェクト側で新規に作成してください。  
標準配布のテンプレートは `GitHubリポジトリ内のtemplatesディレクトリ <https://github.com/masao/ttl2html/tree/main/templates>`_ に置かれています。
必要に応じてこれを参照し、コピーしてから内容をプロジェクトにあわせて変更して使うことをお勧めします。

テンプレート内で利用できる変数
-------------------------------

テンプレート内では、``param`` 変数を介して RDF データや設定値を参照できます。  

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - 変数名
     - 説明
   * - ``param[:uri]``
     - 当該リソースの URI
   * - ``param[:turtle_uri]``
     - Turtle 形式のリソース URI
   * - ``param[:title]``
     - リソースのタイトルラベル
   * - ``param[:data]``
     - 主語＝リソースのトリプル情報
   * - ``param[:data_inverse]``
     - 目的語＝リソースのトリプル情報
   * - ``param[:site_title]`` など
     - ``config.yml`` で定義した任意の設定値

設定ファイル ``config.yml`` で指定された設定値にも、 ``param`` 変数を通じてアクセスできます。例えば、 ``param[:site_title]``, ``param[:admin_name]`` などの設定値にアクセスできます（:doc:`configuration` 参照）。

利用例
^^^^^^

**タイトルの出力**

.. code-block:: erb

   <h1><%= param[:title] || param[:uri] %></h1>

**Turtle 形式のリンク**

.. code-block:: erb

   <% if param[:turtle_uri] %>
     <a href="<%= param[:turtle_uri] %>">Turtle</a>
   <% end %>

**プロパティ一覧の表示**

.. code-block:: erb

   <% data = param[:data] || {} %>
   <dl>
     <% data.each do |prop, values| %>
       <dt><%= prop %></dt>
       <dd>
         <% Array(values).each do |v| %>
           <%= v.is_a?(Hash) ? (v[:label] || v[:uri]) : v %><br>
         <% end %>
       </dd>
     <% end %>
   </dl>

.. note::
   ``Array(values)`` のように配列化してからループすると、単一値でも安全に処理できます。

その他のページの構造
--------------------

RDFデータとして与えられる個別のリソースページ以外に、本ツールが独自に生成するページとして、データセットの説明ページ ``about.html`` （:confval:`about_file`）とトップページ ``index.html`` の2つがあります。これらのページの構造は以下のようになっています。

aboutページの構造
^^^^^^^^^^^^^^^^^

aboutページのHTML構造は、基本テンプレートと同様、 ``layout.html.erb`` が全体のHTML構造を規定しており、ページ固有の内容は ``about.html.erb`` が描画し、サイト特有の追加的な説明を加える場合は、 ``about.html`` ファイルを追加することで追加の説明文を加えられます。
また、冒頭の見出し節内に追加的な説明文を加えるために ``description.html`` ファイルがあれば、その内容が差し込まれます。

.. figure:: template-about.png

    aboutページのHTML構造

個別のリソースページと同様、標準配布には ``layout.html.erb`` と ``about.html.erb`` が同梱されています。
カスタマイズが不要であれば、そのまま利用できます。

また、末尾のLOD語彙の説明については :doc:`shapes` の機能により生成される内容、バージョン履歴情報については :doc:`dataset` の機能により生成される内容になります。

トップページの構造
^^^^^^^^^^^^^^^^^^

トップページのHTML構造は、基本テンプレートと同様、 ``layout.html.erb`` が全体のHTML構造を規定しており、ページ固有の内容は ``index.html.erb`` が描画し、個別のページごとに追加的な要素を加える場合は、 ``index-list.html`` ファイルを追加することで追加的な説明文などを加えることができます。
また、先述した ``about.html`` と同様、冒頭の見出し節内に追加的な説明文を加えるために ``description.html`` ファイルがあれば、その内容が差し込まれます。

.. figure:: template-index.png

    トップページ（index.html）のHTML構造

個別のリソースページと同様、標準配布には ``layout.html.erb`` と ``index-list.html.erb`` が同梱されています。
カスタマイズが不要であれば、そのまま利用できます。

また、末尾の最新バージョン情報、ライセンス情報、SPARQLエンドポイント情報の追加要素については :doc:`dataset` の機能により生成される内容になります。

デフォルトテンプレートのカスタマイズ方法
----------------------------------------

ttl2html では、標準で同梱されているテンプレートをそのまま利用できますが、
多くの場合は見た目や表示内容を独自に変更したい場面もあります。
ここでは、テンプレートの配置場所・解決順序とあわせて、デフォルトテンプレートのカスタマイズ手順を説明します。

テンプレート解決順序
^^^^^^^^^^^^^^^^^^^^

ttl2html は 同梱の標準テンプレート を基準にしつつ、プロジェクト側の ``templates/`` 配下に同名テンプレートファイルがあれば、プロジェクト側のテンプレートファイルが優先されます。
典型的な解決順序は次の通りです。

1. プロジェクト側に ``templates/layout.html.erb`` があれば、それを用いる。
2. プロジェクト側に ``templates/layout.html.erb`` がなければ、標準同梱の同名ファイルを使用する。
3. 各ページの描画にはプロジェクト側に  ``templates/default.html.erb`` があれば、それを用いる。
4. プロジェクト側に ``templates/default.html.erb`` がなければ、標準同梱の同名ファイルを使用する。
5. ページごとのカスタム差し込み内容がある場合は、同名の部分テンプレートを探し、存在すれば ``default.html.erb`` の定義位置でレンダリングします（例： ``_default.html.erb``）。

.. note::
   ``_default.html.erb`` は標準配布には含まれません。  
   ページ固有の追加要素が必要な場合は、プロジェクト側 ``templates/`` に作成してください。

基本的には、何も設定しなくても標準のままで動作します。
必要箇所だけ差し替えるだけで段階的にカスタマイズできます。
また、同名ファイルは「プロジェクト側を優先」だけ覚えておけば、必要な箇所のみ変更しながら安全に試行できます。

ディレクトリ構成と配置場所
^^^^^^^^^^^^^^^^^^^^^^^^^^

ttl2html プロジェクトでの推奨ディレクトリ構成を以下に示します。  
テンプレートは ``templates/`` ディレクトリに置くと、標準のテンプレートより優先して利用されます。

.. code-block:: text

   project-root/
   ├── config.yml
   ├── templates/
   │   ├── _default.html.erb      # リソースページごとの追加要素（必要に応じて作成）
   │   ├── about.html             # about ページ用の追加要素
   └── assets/
       ├── css/
       │   └── site.css           # 独自スタイル
       ├── js/
       │   └── site.js            # 独自スクリプト
       └── img/
           └── logo.png           # 画像ファイル

- ``templates/``: ERB テンプレート置き場。同名ファイルがある場合は標準よりもこちらが優先されます。
- ``assets/``: CSS, JavaScript, 画像などの静的リソースを配置します。``layout.html.erb`` から読み込みます。
- ``_default.html.erb`` などのファイルは部分テンプレートで、ページ固有の追加要素を差し込みたい場合に使用します。

デフォルトテンプレートの取得方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

標準配布のテンプレートは `GitHub リポジトリ内 templates/ ディレクトリ <https://github.com/masao/ttl2html/tree/main/templates>`_ にあります。
プロジェクト側で ``templates/`` ディレクトリを作成し、そこにファイルをコピーしたうえでカスタマイズしてください。
コピーして修正することで、標準テンプレートが更新されても影響を受けずに済みます。

変更できる部分と制約
^^^^^^^^^^^^^^^^^^^^^

- HTML構造は自由に変更できますが、 ``param`` 変数の呼び出しを削除するとRDFデータが表示されなくなりますので、注意してください。
- 存在しない変数キーを呼び出すとエラーになるため、 ``Array(...)`` で安全にラップするなどの工夫を推奨します。
- 直接標準ファイルを編集せず、必ずコピーして修正してください。

カスタマイズ例
^^^^^^^^^^^^^^

**例1**: 以下は外部データベースへのリンク出力を追加する例です。

たとえば当該リソースが ``dcterms:identifier`` プロパティをもつときに、当該プロパティの値をつかって外部データベースへのリンクを付与する例です。

.. code-block:: erb

   <!-- templates/_default.html.erb -->
   <%# 例: param[:data]["http://purl.org/dc/terms/identifier"] にID文字列があることを想定 %>
   <% ids = Array((param[:data] || {})["http://purl.org/dc/terms/identifier"]) %>
   <% if not ids.empty? %>
     <ul>
     <% ids.each do |id| %>
       <li><a href="https://external.example.org/records/<%= id %>">#<%= id %></a></li>
     <% end %>
     </ul>
   <% end %>

**例2**: 例1のリンク出力を特定のクラスに属するリソースにのみ追加する例です。

たとえば当該リソースが ``<https://schema.org/Book>`` クラスに属するときにのみ、当該プロパティの値をつかって外部データベースへのリンクを付与する例です。

.. code-block:: erb

   <!-- templates/_default.html.erb -->
   <%# 例: 当該リソースのクラスが <https://schema.org/Book> である場合のみ外部DBへのリンクを出力 %>
   <% types = Array((param[:data] || {})["http://www.w3.org/1999/02/22-rdf-syntax-ns#type"]) %>
   <% if types.include? "https://schema.org/Book" %>
     <% ids = Array((param[:data] || {})["http://purl.org/dc/terms/identifier"]) %>
     <% if not ids.empty? %>
       <ul>
       <% ids.each do |id| %>
         <li><a href="https://external.example.org/records/<%= id %>">#<%= id %></a></li>
       <% end %>
       </ul>
     <% end %>
   <% end %>

高度なカスタマイズ
------------------

ERB の条件分岐と繰り返し
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: erb

   <% if param[:title] %>
     <h1><%= param[:title] %></h1>
   <% end %>

   <% Array(param[:data]).each do |prop, values| %>
     ...
   <% end %>

逆リンクの活用
^^^^^^^^^^^^^^

``param[:data_inverse]`` を用いて、参照元のリソースを一覧できます。

トラブルシューティング
----------------------

よくあるエラーと解決策
^^^^^^^^^^^^^^^^^^^^^^^

- **何も表示されない**: ``<%=`` と ``<%`` を取り違えていないか確認してください。
- **未定義エラー**: 存在しないキーを参照している場合、値が未定義 (nil) となることがあります。トリプルデータは値に抜けがあったり、複数トリプルが追加されている場合があるので、注意してください。
- **ループでクラッシュ**: 値が未定義 (nil) になっている場合があるので ``Array(...)`` でくくるのが安全です。

テンプレートが適用されない場合
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ファイル名・拡張子を確認する。
- ``templates/`` 配下に配置しているか確認する。
- 出力 HTML を開いて差分を確認する。

デバッグ Tips
^^^^^^^^^^^^^^

- ``<pre><%= param.inspect %></pre>`` で変数内容を確認  
- ブラウザの開発者ツールで DOM を確認


参考情報
--------

- ERB リファレンス: `<https://en.wikipedia.org/wiki/ERuby>`_
- 標準テンプレート: `<https://github.com/masao/ttl2html/tree/main/templates>`_
